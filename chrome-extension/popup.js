document.addEventListener('DOMContentLoaded', () => {
  // DOM Elements
  const loginButton = document.getElementById('loginButton');
  const userInfo = document.getElementById('userInfo');
  const summarizeBtn = document.getElementById('summarizeBtn');
  const qnaBtn = document.getElementById('qnaBtn');
  const flashcardsBtn = document.getElementById('flashcardsBtn');
  const quizBtn = document.getElementById('quizBtn');
  const contentView = document.getElementById('contentView');
  const loadingOverlay = document.getElementById('loadingOverlay');
  
  // Check if user is authenticated
  checkAuthStatus();
  
  // Event listeners
  loginButton.addEventListener('click', handleLogin);
  summarizeBtn.addEventListener('click', () => handleAction('summarize'));
  qnaBtn.addEventListener('click', () => handleAction('qna'));
  flashcardsBtn.addEventListener('click', () => handleAction('flashcards'));
  quizBtn.addEventListener('click', () => handleAction('quiz'));
  
  // Functions
  function checkAuthStatus() {
    chrome.storage.local.get(['user'], (result) => {
      if (result.user) {
        showLoggedInState(result.user);
      } else {
        showLoggedOutState();
      }
    });
  }
  
  function showLoggedInState(user) {
    userInfo.innerHTML = `
      <div class="user-profile">
        <div class="user-avatar">${getInitials(user.displayName)}</div>
        <span class="user-name">${user.displayName}</span>
      </div>
    `;
  }
  
  function showLoggedOutState() {
    userInfo.innerHTML = `
      <button id="loginButton" class="login-button">Sign In</button>
    `;
    document.getElementById('loginButton').addEventListener('click', handleLogin);
  }
  
  function getInitials(name) {
    if (!name) return '?';
    return name.split(' ').map(n => n[0]).join('').toUpperCase();
  }
  
  function handleLogin() {
    // Redirect to the web app for authentication
    chrome.tabs.create({ url: 'https://insightlensai.com/login?source=extension' });
  }
  
  function handleAction(action) {
    // Show loading state
    loadingOverlay.style.display = 'flex';
    
    // Get current tab info
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      const currentTab = tabs[0];
      
      // Execute content script to extract page content
      chrome.scripting.executeScript({
        target: { tabId: currentTab.id },
        function: extractPageContent
      }, (results) => {
        if (chrome.runtime.lastError) {
          showError("Cannot access this page. Try a different page.");
          return;
        }
        
        const pageContent = results[0].result;
        
        // Send to backend for processing
        processContent(action, pageContent, currentTab.url, currentTab.title)
          .then(response => {
            // Hide loading state
            loadingOverlay.style.display = 'none';
            
            // Display results
            displayResults(action, response);
          })
          .catch(error => {
            // Hide loading state
            loadingOverlay.style.display = 'none';
            
            // Show error
            showError(error.message || "An error occurred. Please try again.");
          });
      });
    });
  }
  
  function extractPageContent() {
    // Get visible text content from the page
    const bodyText = document.body.innerText;
    const title = document.title;
    const headings = Array.from(document.querySelectorAll('h1, h2, h3'))
      .map(h => h.innerText.trim())
      .filter(h => h.length > 0);
    
    return {
      title,
      headings,
      bodyText,
      url: window.location.href
    };
  }
  
  async function processContent(action, content, url, title) {
    // In a real implementation, this would call your backend API
    // For now, we'll simulate with a mock response
    
    return new Promise((resolve) => {
      setTimeout(() => {
        switch(action) {
          case 'summarize':
            resolve({
              summary: "This is a simulated summary of the page content. In the actual implementation, this would be generated by the AI model based on the content extracted from the page."
            });
            break;
          case 'qna':
            resolve({
              message: "Ask a question about this content"
            });
            break;
          case 'flashcards':
            resolve({
              flashcards: [
                { front: "What is InsightLens AI?", back: "An AI-powered learning tool for summarization, Q&A, and study aids" },
                { front: "What technologies does InsightLens use?", back: "AI models for text analysis, Firebase for backend, and Chrome Extensions for browser integration" }
              ]
            });
            break;
          case 'quiz':
            resolve({
              message: "Quiz generation will be available soon!"
            });
            break;
          default:
            resolve({ message: "Select an action" });
        }
      }, 1500);
    });
  }
  
  function displayResults(action, response) {
    let html = '';
    
    switch(action) {
      case 'summarize':
        html = `
          <h2>Summary</h2>
          <div class="result-box">
            <p>${response.summary}</p>
          </div>
          <div class="action-row">
            <button class="action-btn copy-btn">Copy</button>
            <button class="action-btn save-btn">Save</button>
          </div>
        `;
        break;
        
      case 'qna':
        html = `
          <h2>Ask a Question</h2>
          <div class="input-group">
            <input type="text" id="questionInput" placeholder="Type your question here...">
            <button id="askBtn" class="ask-btn">Ask</button>
          </div>
          <div id="qnaResults" class="qna-results">
            <p class="placeholder-text">${response.message}</p>
          </div>
        `;
        break;
        
      case 'flashcards':
        html = `
          <h2>Generated Flashcards</h2>
          <div class="flashcards-container">
            ${response.flashcards.map((card, index) => `
              <div class="flashcard" data-index="${index}">
                <div class="flashcard-inner">
                  <div class="flashcard-front">
                    <p>${card.front}</p>
                  </div>
                  <div class="flashcard-back">
                    <p>${card.back}</p>
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
          <div class="action-row">
            <button class="action-btn save-btn">Save All</button>
            <button class="action-btn generate-btn">Generate More</button>
          </div>
        `;
        break;
        
      case 'quiz':
        html = `
          <h2>Quiz Generation</h2>
          <div class="result-box">
            <p>${response.message}</p>
          </div>
        `;
        break;
        
      default:
        html = `<p>Unknown action</p>`;
    }
    
    contentView.innerHTML = html;
    
    // Add event listeners for newly created elements
    if (action === 'flashcards') {
      document.querySelectorAll('.flashcard').forEach(card => {
        card.addEventListener('click', function() {
          this.classList.toggle('flipped');
        });
      });
    }
    
    if (action === 'qna') {
      const askBtn = document.getElementById('askBtn');
      if (askBtn) {
        askBtn.addEventListener('click', handleAskQuestion);
      }
    }
  }
  
  function handleAskQuestion() {
    const questionInput = document.getElementById('questionInput');
    const question = questionInput.value.trim();
    
    if (!question) return;
    
    const qnaResults = document.getElementById('qnaResults');
    qnaResults.innerHTML = `
      <div class="question-item">
        <div class="question">
          <strong>Q:</strong> ${question}
        </div>
        <div class="answer">
          <strong>A:</strong> <p>This is a simulated answer to your question. In the actual implementation, this would be generated by the AI model.</p>
        </div>
      </div>
    `;
    
    questionInput.value = '';
  }
  
  function showError(message) {
    loadingOverlay.style.display = 'none';
    contentView.innerHTML = `
      <div class="error-message">
        <p>${message}</p>
        <button id="tryAgainBtn" class="try-again-btn">Try Again</button>
      </div>
    `;
    
    document.getElementById('tryAgainBtn').addEventListener('click', () => {
      contentView.innerHTML = `
        <div class="placeholder-message">
          <p>Select an action to start working with the current page</p>
        </div>
      `;
    });
  }
}); 